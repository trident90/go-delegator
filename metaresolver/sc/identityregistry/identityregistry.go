// Code generated - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package identityregistry

import (
	"math/big"
	"strings"

	ethereum "github.com/ethereum/go-ethereum"
	"github.com/ethereum/go-ethereum/accounts/abi"
	"github.com/ethereum/go-ethereum/accounts/abi/bind"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/core/types"
	"github.com/ethereum/go-ethereum/event"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = big.NewInt
	_ = strings.NewReader
	_ = ethereum.NotFound
	_ = bind.Bind
	_ = common.Big1
	_ = types.BloomLookup
	_ = event.NewSubscription
)

// IdentityregistryABI is the input ABI used to generate the binding from.
const IdentityregistryABI = "[{\"constant\":true,\"inputs\":[],\"name\":\"recoveryTimeout\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"signatureTimeout\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"},{\"name\":\"messageHash\",\"type\":\"bytes32\"},{\"name\":\"v\",\"type\":\"uint8\"},{\"name\":\"r\",\"type\":\"bytes32\"},{\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"isSigned\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"nextEIN\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"maxAssociatedAddresses\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"initiator\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"ein\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"recoveryAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"associatedAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"providers\",\"type\":\"address[]\"},{\"indexed\":false,\"name\":\"resolvers\",\"type\":\"address[]\"},{\"indexed\":false,\"name\":\"delegated\",\"type\":\"bool\"}],\"name\":\"IdentityCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"initiator\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"ein\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"approvingAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"addedAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"delegated\",\"type\":\"bool\"}],\"name\":\"AssociatedAddressAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"initiator\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"ein\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"removedAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"delegated\",\"type\":\"bool\"}],\"name\":\"AssociatedAddressRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"initiator\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"ein\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"provider\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"delegated\",\"type\":\"bool\"}],\"name\":\"ProviderAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"initiator\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"ein\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"provider\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"delegated\",\"type\":\"bool\"}],\"name\":\"ProviderRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"initiator\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"ein\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"resolvers\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"delegated\",\"type\":\"bool\"}],\"name\":\"ResolverAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"initiator\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"ein\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"resolvers\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"delegated\",\"type\":\"bool\"}],\"name\":\"ResolverRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"initiator\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"ein\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"oldRecoveryAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"newRecoveryAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"delegated\",\"type\":\"bool\"}],\"name\":\"RecoveryAddressChangeTriggered\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"initiator\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"ein\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"oldAssociatedAddresses\",\"type\":\"address[]\"},{\"indexed\":false,\"name\":\"newAssociatedAddress\",\"type\":\"address\"}],\"name\":\"RecoveryTriggered\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"initiator\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"ein\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"recoveryAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"resolversReset\",\"type\":\"bool\"}],\"name\":\"IdentityDestroyed\",\"type\":\"event\"},{\"constant\":true,\"inputs\":[{\"name\":\"ein\",\"type\":\"uint256\"}],\"name\":\"identityExists\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"hasIdentity\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"getEIN\",\"outputs\":[{\"name\":\"ein\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"ein\",\"type\":\"uint256\"},{\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"isAssociatedAddressFor\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"ein\",\"type\":\"uint256\"},{\"name\":\"provider\",\"type\":\"address\"}],\"name\":\"isProviderFor\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"ein\",\"type\":\"uint256\"},{\"name\":\"resolver\",\"type\":\"address\"}],\"name\":\"isResolverFor\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"ein\",\"type\":\"uint256\"}],\"name\":\"getIdentity\",\"outputs\":[{\"name\":\"recoveryAddress\",\"type\":\"address\"},{\"name\":\"associatedAddresses\",\"type\":\"address[]\"},{\"name\":\"providers\",\"type\":\"address[]\"},{\"name\":\"resolvers\",\"type\":\"address[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"recoveryAddress\",\"type\":\"address\"},{\"name\":\"associatedAddress\",\"type\":\"address\"},{\"name\":\"providers\",\"type\":\"address[]\"},{\"name\":\"resolvers\",\"type\":\"address[]\"},{\"name\":\"v\",\"type\":\"uint8\"},{\"name\":\"r\",\"type\":\"bytes32\"},{\"name\":\"s\",\"type\":\"bytes32\"},{\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"createIdentityDelegated\",\"outputs\":[{\"name\":\"ein\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"recoveryAddress\",\"type\":\"address\"},{\"name\":\"providers\",\"type\":\"address[]\"},{\"name\":\"resolvers\",\"type\":\"address[]\"}],\"name\":\"createIdentity\",\"outputs\":[{\"name\":\"ein\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"approvingAddress\",\"type\":\"address\"},{\"name\":\"addressToAdd\",\"type\":\"address\"},{\"name\":\"v\",\"type\":\"uint8[2]\"},{\"name\":\"r\",\"type\":\"bytes32[2]\"},{\"name\":\"s\",\"type\":\"bytes32[2]\"},{\"name\":\"timestamp\",\"type\":\"uint256[2]\"}],\"name\":\"addAssociatedAddressDelegated\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"approvingAddress\",\"type\":\"address\"},{\"name\":\"addressToAdd\",\"type\":\"address\"},{\"name\":\"v\",\"type\":\"uint8\"},{\"name\":\"r\",\"type\":\"bytes32\"},{\"name\":\"s\",\"type\":\"bytes32\"},{\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"addAssociatedAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"addressToRemove\",\"type\":\"address\"},{\"name\":\"v\",\"type\":\"uint8\"},{\"name\":\"r\",\"type\":\"bytes32\"},{\"name\":\"s\",\"type\":\"bytes32\"},{\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"removeAssociatedAddressDelegated\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"removeAssociatedAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"ein\",\"type\":\"uint256\"},{\"name\":\"providers\",\"type\":\"address[]\"}],\"name\":\"addProvidersFor\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"providers\",\"type\":\"address[]\"}],\"name\":\"addProviders\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"ein\",\"type\":\"uint256\"},{\"name\":\"providers\",\"type\":\"address[]\"}],\"name\":\"removeProvidersFor\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"providers\",\"type\":\"address[]\"}],\"name\":\"removeProviders\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"ein\",\"type\":\"uint256\"},{\"name\":\"resolvers\",\"type\":\"address[]\"}],\"name\":\"addResolversFor\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"resolvers\",\"type\":\"address[]\"}],\"name\":\"addResolvers\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"ein\",\"type\":\"uint256\"},{\"name\":\"resolvers\",\"type\":\"address[]\"}],\"name\":\"removeResolversFor\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"resolvers\",\"type\":\"address[]\"}],\"name\":\"removeResolvers\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"ein\",\"type\":\"uint256\"},{\"name\":\"newRecoveryAddress\",\"type\":\"address\"}],\"name\":\"triggerRecoveryAddressChangeFor\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newRecoveryAddress\",\"type\":\"address\"}],\"name\":\"triggerRecoveryAddressChange\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"ein\",\"type\":\"uint256\"},{\"name\":\"newAssociatedAddress\",\"type\":\"address\"},{\"name\":\"v\",\"type\":\"uint8\"},{\"name\":\"r\",\"type\":\"bytes32\"},{\"name\":\"s\",\"type\":\"bytes32\"},{\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"triggerRecovery\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"ein\",\"type\":\"uint256\"},{\"name\":\"firstChunk\",\"type\":\"address[]\"},{\"name\":\"lastChunk\",\"type\":\"address[]\"},{\"name\":\"resetResolvers\",\"type\":\"bool\"}],\"name\":\"triggerDestruction\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]"

// IdentityregistryBin is the compiled bytecode used for deploying new contracts.
const IdentityregistryBin = ``

// DeployIdentityregistry deploys a new Ethereum contract, binding an instance of Identityregistry to it.
func DeployIdentityregistry(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *Identityregistry, error) {
	parsed, err := abi.JSON(strings.NewReader(IdentityregistryABI))
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	address, tx, contract, err := bind.DeployContract(auth, parsed, common.FromHex(IdentityregistryBin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &Identityregistry{IdentityregistryCaller: IdentityregistryCaller{contract: contract}, IdentityregistryTransactor: IdentityregistryTransactor{contract: contract}, IdentityregistryFilterer: IdentityregistryFilterer{contract: contract}}, nil
}

// Identityregistry is an auto generated Go binding around an Ethereum contract.
type Identityregistry struct {
	IdentityregistryCaller     // Read-only binding to the contract
	IdentityregistryTransactor // Write-only binding to the contract
	IdentityregistryFilterer   // Log filterer for contract events
}

// IdentityregistryCaller is an auto generated read-only Go binding around an Ethereum contract.
type IdentityregistryCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// IdentityregistryTransactor is an auto generated write-only Go binding around an Ethereum contract.
type IdentityregistryTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// IdentityregistryFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type IdentityregistryFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// IdentityregistrySession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type IdentityregistrySession struct {
	Contract     *Identityregistry // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// IdentityregistryCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type IdentityregistryCallerSession struct {
	Contract *IdentityregistryCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts           // Call options to use throughout this session
}

// IdentityregistryTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type IdentityregistryTransactorSession struct {
	Contract     *IdentityregistryTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts           // Transaction auth options to use throughout this session
}

// IdentityregistryRaw is an auto generated low-level Go binding around an Ethereum contract.
type IdentityregistryRaw struct {
	Contract *Identityregistry // Generic contract binding to access the raw methods on
}

// IdentityregistryCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type IdentityregistryCallerRaw struct {
	Contract *IdentityregistryCaller // Generic read-only contract binding to access the raw methods on
}

// IdentityregistryTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type IdentityregistryTransactorRaw struct {
	Contract *IdentityregistryTransactor // Generic write-only contract binding to access the raw methods on
}

// NewIdentityregistry creates a new instance of Identityregistry, bound to a specific deployed contract.
func NewIdentityregistry(address common.Address, backend bind.ContractBackend) (*Identityregistry, error) {
	contract, err := bindIdentityregistry(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &Identityregistry{IdentityregistryCaller: IdentityregistryCaller{contract: contract}, IdentityregistryTransactor: IdentityregistryTransactor{contract: contract}, IdentityregistryFilterer: IdentityregistryFilterer{contract: contract}}, nil
}

// NewIdentityregistryCaller creates a new read-only instance of Identityregistry, bound to a specific deployed contract.
func NewIdentityregistryCaller(address common.Address, caller bind.ContractCaller) (*IdentityregistryCaller, error) {
	contract, err := bindIdentityregistry(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &IdentityregistryCaller{contract: contract}, nil
}

// NewIdentityregistryTransactor creates a new write-only instance of Identityregistry, bound to a specific deployed contract.
func NewIdentityregistryTransactor(address common.Address, transactor bind.ContractTransactor) (*IdentityregistryTransactor, error) {
	contract, err := bindIdentityregistry(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &IdentityregistryTransactor{contract: contract}, nil
}

// NewIdentityregistryFilterer creates a new log filterer instance of Identityregistry, bound to a specific deployed contract.
func NewIdentityregistryFilterer(address common.Address, filterer bind.ContractFilterer) (*IdentityregistryFilterer, error) {
	contract, err := bindIdentityregistry(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &IdentityregistryFilterer{contract: contract}, nil
}

// bindIdentityregistry binds a generic wrapper to an already deployed contract.
func bindIdentityregistry(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(IdentityregistryABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Identityregistry *IdentityregistryRaw) Call(opts *bind.CallOpts, result interface{}, method string, params ...interface{}) error {
	var results []interface{}
	err := _Identityregistry.Contract.IdentityregistryCaller.contract.Call(opts, &results, method, params...)
	result = results[0]
	return err
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Identityregistry *IdentityregistryRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Identityregistry.Contract.IdentityregistryTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Identityregistry *IdentityregistryRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Identityregistry.Contract.IdentityregistryTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Identityregistry *IdentityregistryCallerRaw) Call(opts *bind.CallOpts, result interface{}, method string, params ...interface{}) error {
	var results []interface{}
	err := _Identityregistry.Contract.contract.Call(opts, &results, method, params...)
	result = results[0]
	return err
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Identityregistry *IdentityregistryTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Identityregistry.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Identityregistry *IdentityregistryTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Identityregistry.Contract.contract.Transact(opts, method, params...)
}

// GetEIN is a free data retrieval call binding the contract method 0x05c62c2f.
//
// Solidity: function getEIN(address _address) constant returns(uint256 ein)
func (_Identityregistry *IdentityregistryCaller) GetEIN(opts *bind.CallOpts, _address common.Address) (*big.Int, error) {
	var results []interface{}
	err := _Identityregistry.contract.Call(opts, &results, "getEIN", _address)
	return results[0].(*big.Int), err
}

// GetEIN is a free data retrieval call binding the contract method 0x05c62c2f.
//
// Solidity: function getEIN(address _address) constant returns(uint256 ein)
func (_Identityregistry *IdentityregistrySession) GetEIN(_address common.Address) (*big.Int, error) {
	return _Identityregistry.Contract.GetEIN(&_Identityregistry.CallOpts, _address)
}

// GetEIN is a free data retrieval call binding the contract method 0x05c62c2f.
//
// Solidity: function getEIN(address _address) constant returns(uint256 ein)
func (_Identityregistry *IdentityregistryCallerSession) GetEIN(_address common.Address) (*big.Int, error) {
	return _Identityregistry.Contract.GetEIN(&_Identityregistry.CallOpts, _address)
}

type IdentityArgs struct {
	RecoveryAddress     common.Address
	AssociatedAddresses []common.Address
	Providers           []common.Address
	Resolvers           []common.Address
} 

// GetIdentity is a free data retrieval call binding the contract method 0x85e3f058.
//
// Solidity: function getIdentity(uint256 ein) constant returns(address recoveryAddress, address[] associatedAddresses, address[] providers, address[] resolvers)
func (_Identityregistry *IdentityregistryCaller) GetIdentity(opts *bind.CallOpts, ein *big.Int) ( IdentityArgs, error) {
	var results []interface{}
	err := _Identityregistry.contract.Call(opts, &results, "getIdentity", ein)
	return results[0].(IdentityArgs), err
}

// GetIdentity is a free data retrieval call binding the contract method 0x85e3f058.
//
// Solidity: function getIdentity(uint256 ein) constant returns(address recoveryAddress, address[] associatedAddresses, address[] providers, address[] resolvers)
func (_Identityregistry *IdentityregistrySession) GetIdentity(ein *big.Int) (struct {
	RecoveryAddress     common.Address
	AssociatedAddresses []common.Address
	Providers           []common.Address
	Resolvers           []common.Address
}, error) {
	return _Identityregistry.Contract.GetIdentity(&_Identityregistry.CallOpts, ein)
}

// GetIdentity is a free data retrieval call binding the contract method 0x85e3f058.
//
// Solidity: function getIdentity(uint256 ein) constant returns(address recoveryAddress, address[] associatedAddresses, address[] providers, address[] resolvers)
func (_Identityregistry *IdentityregistryCallerSession) GetIdentity(ein *big.Int) (struct {
	RecoveryAddress     common.Address
	AssociatedAddresses []common.Address
	Providers           []common.Address
	Resolvers           []common.Address
}, error) {
	return _Identityregistry.Contract.GetIdentity(&_Identityregistry.CallOpts, ein)
}

// HasIdentity is a free data retrieval call binding the contract method 0x237f1a21.
//
// Solidity: function hasIdentity(address _address) constant returns(bool)
func (_Identityregistry *IdentityregistryCaller) HasIdentity(opts *bind.CallOpts, _address common.Address) (bool, error) {
	var results []interface{}
	err := _Identityregistry.contract.Call(opts, &results, "hasIdentity", _address)
	return results[0].(bool), err
}

// HasIdentity is a free data retrieval call binding the contract method 0x237f1a21.
//
// Solidity: function hasIdentity(address _address) constant returns(bool)
func (_Identityregistry *IdentityregistrySession) HasIdentity(_address common.Address) (bool, error) {
	return _Identityregistry.Contract.HasIdentity(&_Identityregistry.CallOpts, _address)
}

// HasIdentity is a free data retrieval call binding the contract method 0x237f1a21.
//
// Solidity: function hasIdentity(address _address) constant returns(bool)
func (_Identityregistry *IdentityregistryCallerSession) HasIdentity(_address common.Address) (bool, error) {
	return _Identityregistry.Contract.HasIdentity(&_Identityregistry.CallOpts, _address)
}

// IdentityExists is a free data retrieval call binding the contract method 0x5b5aed3a.
//
// Solidity: function identityExists(uint256 ein) constant returns(bool)
func (_Identityregistry *IdentityregistryCaller) IdentityExists(opts *bind.CallOpts, ein *big.Int) (bool, error) {
	var results []interface{}
	err := _Identityregistry.contract.Call(opts, &results, "identityExists", ein)
	return results[0].(bool), err
}

// IdentityExists is a free data retrieval call binding the contract method 0x5b5aed3a.
//
// Solidity: function identityExists(uint256 ein) constant returns(bool)
func (_Identityregistry *IdentityregistrySession) IdentityExists(ein *big.Int) (bool, error) {
	return _Identityregistry.Contract.IdentityExists(&_Identityregistry.CallOpts, ein)
}

// IdentityExists is a free data retrieval call binding the contract method 0x5b5aed3a.
//
// Solidity: function identityExists(uint256 ein) constant returns(bool)
func (_Identityregistry *IdentityregistryCallerSession) IdentityExists(ein *big.Int) (bool, error) {
	return _Identityregistry.Contract.IdentityExists(&_Identityregistry.CallOpts, ein)
}

// IsAssociatedAddressFor is a free data retrieval call binding the contract method 0xa687662d.
//
// Solidity: function isAssociatedAddressFor(uint256 ein, address _address) constant returns(bool)
func (_Identityregistry *IdentityregistryCaller) IsAssociatedAddressFor(opts *bind.CallOpts, ein *big.Int, _address common.Address) (bool, error) {
	var results []interface{}
	err := _Identityregistry.contract.Call(opts, &results, "isAssociatedAddressFor", ein, _address)
	return results[0].(bool), err
}

// IsAssociatedAddressFor is a free data retrieval call binding the contract method 0xa687662d.
//
// Solidity: function isAssociatedAddressFor(uint256 ein, address _address) constant returns(bool)
func (_Identityregistry *IdentityregistrySession) IsAssociatedAddressFor(ein *big.Int, _address common.Address) (bool, error) {
	return _Identityregistry.Contract.IsAssociatedAddressFor(&_Identityregistry.CallOpts, ein, _address)
}

// IsAssociatedAddressFor is a free data retrieval call binding the contract method 0xa687662d.
//
// Solidity: function isAssociatedAddressFor(uint256 ein, address _address) constant returns(bool)
func (_Identityregistry *IdentityregistryCallerSession) IsAssociatedAddressFor(ein *big.Int, _address common.Address) (bool, error) {
	return _Identityregistry.Contract.IsAssociatedAddressFor(&_Identityregistry.CallOpts, ein, _address)
}

// IsProviderFor is a free data retrieval call binding the contract method 0x53a9698a.
//
// Solidity: function isProviderFor(uint256 ein, address provider) constant returns(bool)
func (_Identityregistry *IdentityregistryCaller) IsProviderFor(opts *bind.CallOpts, ein *big.Int, provider common.Address) (bool, error) {
	var results []interface{}
	err := _Identityregistry.contract.Call(opts, &results, "isProviderFor", ein, provider)
	return results[0].(bool), err
}

// IsProviderFor is a free data retrieval call binding the contract method 0x53a9698a.
//
// Solidity: function isProviderFor(uint256 ein, address provider) constant returns(bool)
func (_Identityregistry *IdentityregistrySession) IsProviderFor(ein *big.Int, provider common.Address) (bool, error) {
	return _Identityregistry.Contract.IsProviderFor(&_Identityregistry.CallOpts, ein, provider)
}

// IsProviderFor is a free data retrieval call binding the contract method 0x53a9698a.
//
// Solidity: function isProviderFor(uint256 ein, address provider) constant returns(bool)
func (_Identityregistry *IdentityregistryCallerSession) IsProviderFor(ein *big.Int, provider common.Address) (bool, error) {
	return _Identityregistry.Contract.IsProviderFor(&_Identityregistry.CallOpts, ein, provider)
}

// IsResolverFor is a free data retrieval call binding the contract method 0xd4b1cdcc.
//
// Solidity: function isResolverFor(uint256 ein, address resolver) constant returns(bool)
func (_Identityregistry *IdentityregistryCaller) IsResolverFor(opts *bind.CallOpts, ein *big.Int, resolver common.Address) (bool, error) {
	var results []interface{}
	err := _Identityregistry.contract.Call(opts, &results, "isResolverFor", ein, resolver)
	return results[0].(bool), err
}

// IsResolverFor is a free data retrieval call binding the contract method 0xd4b1cdcc.
//
// Solidity: function isResolverFor(uint256 ein, address resolver) constant returns(bool)
func (_Identityregistry *IdentityregistrySession) IsResolverFor(ein *big.Int, resolver common.Address) (bool, error) {
	return _Identityregistry.Contract.IsResolverFor(&_Identityregistry.CallOpts, ein, resolver)
}

// IsResolverFor is a free data retrieval call binding the contract method 0xd4b1cdcc.
//
// Solidity: function isResolverFor(uint256 ein, address resolver) constant returns(bool)
func (_Identityregistry *IdentityregistryCallerSession) IsResolverFor(ein *big.Int, resolver common.Address) (bool, error) {
	return _Identityregistry.Contract.IsResolverFor(&_Identityregistry.CallOpts, ein, resolver)
}

// IsSigned is a free data retrieval call binding the contract method 0x8677ebe8.
//
// Solidity: function isSigned(address _address, bytes32 messageHash, uint8 v, bytes32 r, bytes32 s) constant returns(bool)
func (_Identityregistry *IdentityregistryCaller) IsSigned(opts *bind.CallOpts, _address common.Address, messageHash [32]byte, v uint8, r [32]byte, s [32]byte) (bool, error) {
	var results []interface{}
	err := _Identityregistry.contract.Call(opts, &results, "isSigned", _address, messageHash, v, r, s)
	return results[0].(bool), err
}

// IsSigned is a free data retrieval call binding the contract method 0x8677ebe8.
//
// Solidity: function isSigned(address _address, bytes32 messageHash, uint8 v, bytes32 r, bytes32 s) constant returns(bool)
func (_Identityregistry *IdentityregistrySession) IsSigned(_address common.Address, messageHash [32]byte, v uint8, r [32]byte, s [32]byte) (bool, error) {
	return _Identityregistry.Contract.IsSigned(&_Identityregistry.CallOpts, _address, messageHash, v, r, s)
}

// IsSigned is a free data retrieval call binding the contract method 0x8677ebe8.
//
// Solidity: function isSigned(address _address, bytes32 messageHash, uint8 v, bytes32 r, bytes32 s) constant returns(bool)
func (_Identityregistry *IdentityregistryCallerSession) IsSigned(_address common.Address, messageHash [32]byte, v uint8, r [32]byte, s [32]byte) (bool, error) {
	return _Identityregistry.Contract.IsSigned(&_Identityregistry.CallOpts, _address, messageHash, v, r, s)
}

// MaxAssociatedAddresses is a free data retrieval call binding the contract method 0xab9a8538.
//
// Solidity: function maxAssociatedAddresses() constant returns(uint256)
func (_Identityregistry *IdentityregistryCaller) MaxAssociatedAddresses(opts *bind.CallOpts) (*big.Int, error) {
	var results []interface{}
	err := _Identityregistry.contract.Call(opts, &results, "maxAssociatedAddresses")
	return results[0].(*big.Int), err
}

// MaxAssociatedAddresses is a free data retrieval call binding the contract method 0xab9a8538.
//
// Solidity: function maxAssociatedAddresses() constant returns(uint256)
func (_Identityregistry *IdentityregistrySession) MaxAssociatedAddresses() (*big.Int, error) {
	return _Identityregistry.Contract.MaxAssociatedAddresses(&_Identityregistry.CallOpts)
}

// MaxAssociatedAddresses is a free data retrieval call binding the contract method 0xab9a8538.
//
// Solidity: function maxAssociatedAddresses() constant returns(uint256)
func (_Identityregistry *IdentityregistryCallerSession) MaxAssociatedAddresses() (*big.Int, error) {
	return _Identityregistry.Contract.MaxAssociatedAddresses(&_Identityregistry.CallOpts)
}

// NextEIN is a free data retrieval call binding the contract method 0xa1707e7b.
//
// Solidity: function nextEIN() constant returns(uint256)
func (_Identityregistry *IdentityregistryCaller) NextEIN(opts *bind.CallOpts) (*big.Int, error) {
	var results []interface{}
	err := _Identityregistry.contract.Call(opts, &results, "nextEIN")
	return results[0].(*big.Int), err
}

// NextEIN is a free data retrieval call binding the contract method 0xa1707e7b.
//
// Solidity: function nextEIN() constant returns(uint256)
func (_Identityregistry *IdentityregistrySession) NextEIN() (*big.Int, error) {
	return _Identityregistry.Contract.NextEIN(&_Identityregistry.CallOpts)
}

// NextEIN is a free data retrieval call binding the contract method 0xa1707e7b.
//
// Solidity: function nextEIN() constant returns(uint256)
func (_Identityregistry *IdentityregistryCallerSession) NextEIN() (*big.Int, error) {
	return _Identityregistry.Contract.NextEIN(&_Identityregistry.CallOpts)
}

// RecoveryTimeout is a free data retrieval call binding the contract method 0x14d8b821.
//
// Solidity: function recoveryTimeout() constant returns(uint256)
func (_Identityregistry *IdentityregistryCaller) RecoveryTimeout(opts *bind.CallOpts) (*big.Int, error) {
	var results []interface{}
	err := _Identityregistry.contract.Call(opts, &results, "recoveryTimeout")
	return results[0].(*big.Int), err
}

// RecoveryTimeout is a free data retrieval call binding the contract method 0x14d8b821.
//
// Solidity: function recoveryTimeout() constant returns(uint256)
func (_Identityregistry *IdentityregistrySession) RecoveryTimeout() (*big.Int, error) {
	return _Identityregistry.Contract.RecoveryTimeout(&_Identityregistry.CallOpts)
}

// RecoveryTimeout is a free data retrieval call binding the contract method 0x14d8b821.
//
// Solidity: function recoveryTimeout() constant returns(uint256)
func (_Identityregistry *IdentityregistryCallerSession) RecoveryTimeout() (*big.Int, error) {
	return _Identityregistry.Contract.RecoveryTimeout(&_Identityregistry.CallOpts)
}

// SignatureTimeout is a free data retrieval call binding the contract method 0x5437b67c.
//
// Solidity: function signatureTimeout() constant returns(uint256)
func (_Identityregistry *IdentityregistryCaller) SignatureTimeout(opts *bind.CallOpts) (*big.Int, error) {
	var results []interface{}
	err := _Identityregistry.contract.Call(opts, &results, "signatureTimeout")
	return results[0].(*big.Int), err
}

// SignatureTimeout is a free data retrieval call binding the contract method 0x5437b67c.
//
// Solidity: function signatureTimeout() constant returns(uint256)
func (_Identityregistry *IdentityregistrySession) SignatureTimeout() (*big.Int, error) {
	return _Identityregistry.Contract.SignatureTimeout(&_Identityregistry.CallOpts)
}

// SignatureTimeout is a free data retrieval call binding the contract method 0x5437b67c.
//
// Solidity: function signatureTimeout() constant returns(uint256)
func (_Identityregistry *IdentityregistryCallerSession) SignatureTimeout() (*big.Int, error) {
	return _Identityregistry.Contract.SignatureTimeout(&_Identityregistry.CallOpts)
}

// AddAssociatedAddress is a paid mutator transaction binding the contract method 0x3aedf3c9.
//
// Solidity: function addAssociatedAddress(address approvingAddress, address addressToAdd, uint8 v, bytes32 r, bytes32 s, uint256 timestamp) returns()
func (_Identityregistry *IdentityregistryTransactor) AddAssociatedAddress(opts *bind.TransactOpts, approvingAddress common.Address, addressToAdd common.Address, v uint8, r [32]byte, s [32]byte, timestamp *big.Int) (*types.Transaction, error) {
	return _Identityregistry.contract.Transact(opts, "addAssociatedAddress", approvingAddress, addressToAdd, v, r, s, timestamp)
}

// AddAssociatedAddress is a paid mutator transaction binding the contract method 0x3aedf3c9.
//
// Solidity: function addAssociatedAddress(address approvingAddress, address addressToAdd, uint8 v, bytes32 r, bytes32 s, uint256 timestamp) returns()
func (_Identityregistry *IdentityregistrySession) AddAssociatedAddress(approvingAddress common.Address, addressToAdd common.Address, v uint8, r [32]byte, s [32]byte, timestamp *big.Int) (*types.Transaction, error) {
	return _Identityregistry.Contract.AddAssociatedAddress(&_Identityregistry.TransactOpts, approvingAddress, addressToAdd, v, r, s, timestamp)
}

// AddAssociatedAddress is a paid mutator transaction binding the contract method 0x3aedf3c9.
//
// Solidity: function addAssociatedAddress(address approvingAddress, address addressToAdd, uint8 v, bytes32 r, bytes32 s, uint256 timestamp) returns()
func (_Identityregistry *IdentityregistryTransactorSession) AddAssociatedAddress(approvingAddress common.Address, addressToAdd common.Address, v uint8, r [32]byte, s [32]byte, timestamp *big.Int) (*types.Transaction, error) {
	return _Identityregistry.Contract.AddAssociatedAddress(&_Identityregistry.TransactOpts, approvingAddress, addressToAdd, v, r, s, timestamp)
}

// AddAssociatedAddressDelegated is a paid mutator transaction binding the contract method 0xab5f6781.
//
// Solidity: function addAssociatedAddressDelegated(address approvingAddress, address addressToAdd, uint8[2] v, bytes32[2] r, bytes32[2] s, uint256[2] timestamp) returns()
func (_Identityregistry *IdentityregistryTransactor) AddAssociatedAddressDelegated(opts *bind.TransactOpts, approvingAddress common.Address, addressToAdd common.Address, v [2]uint8, r [2][32]byte, s [2][32]byte, timestamp [2]*big.Int) (*types.Transaction, error) {
	return _Identityregistry.contract.Transact(opts, "addAssociatedAddressDelegated", approvingAddress, addressToAdd, v, r, s, timestamp)
}

// AddAssociatedAddressDelegated is a paid mutator transaction binding the contract method 0xab5f6781.
//
// Solidity: function addAssociatedAddressDelegated(address approvingAddress, address addressToAdd, uint8[2] v, bytes32[2] r, bytes32[2] s, uint256[2] timestamp) returns()
func (_Identityregistry *IdentityregistrySession) AddAssociatedAddressDelegated(approvingAddress common.Address, addressToAdd common.Address, v [2]uint8, r [2][32]byte, s [2][32]byte, timestamp [2]*big.Int) (*types.Transaction, error) {
	return _Identityregistry.Contract.AddAssociatedAddressDelegated(&_Identityregistry.TransactOpts, approvingAddress, addressToAdd, v, r, s, timestamp)
}

// AddAssociatedAddressDelegated is a paid mutator transaction binding the contract method 0xab5f6781.
//
// Solidity: function addAssociatedAddressDelegated(address approvingAddress, address addressToAdd, uint8[2] v, bytes32[2] r, bytes32[2] s, uint256[2] timestamp) returns()
func (_Identityregistry *IdentityregistryTransactorSession) AddAssociatedAddressDelegated(approvingAddress common.Address, addressToAdd common.Address, v [2]uint8, r [2][32]byte, s [2][32]byte, timestamp [2]*big.Int) (*types.Transaction, error) {
	return _Identityregistry.Contract.AddAssociatedAddressDelegated(&_Identityregistry.TransactOpts, approvingAddress, addressToAdd, v, r, s, timestamp)
}

// AddProviders is a paid mutator transaction binding the contract method 0x7d079951.
//
// Solidity: function addProviders(address[] providers) returns()
func (_Identityregistry *IdentityregistryTransactor) AddProviders(opts *bind.TransactOpts, providers []common.Address) (*types.Transaction, error) {
	return _Identityregistry.contract.Transact(opts, "addProviders", providers)
}

// AddProviders is a paid mutator transaction binding the contract method 0x7d079951.
//
// Solidity: function addProviders(address[] providers) returns()
func (_Identityregistry *IdentityregistrySession) AddProviders(providers []common.Address) (*types.Transaction, error) {
	return _Identityregistry.Contract.AddProviders(&_Identityregistry.TransactOpts, providers)
}

// AddProviders is a paid mutator transaction binding the contract method 0x7d079951.
//
// Solidity: function addProviders(address[] providers) returns()
func (_Identityregistry *IdentityregistryTransactorSession) AddProviders(providers []common.Address) (*types.Transaction, error) {
	return _Identityregistry.Contract.AddProviders(&_Identityregistry.TransactOpts, providers)
}

// AddProvidersFor is a paid mutator transaction binding the contract method 0x960b11f5.
//
// Solidity: function addProvidersFor(uint256 ein, address[] providers) returns()
func (_Identityregistry *IdentityregistryTransactor) AddProvidersFor(opts *bind.TransactOpts, ein *big.Int, providers []common.Address) (*types.Transaction, error) {
	return _Identityregistry.contract.Transact(opts, "addProvidersFor", ein, providers)
}

// AddProvidersFor is a paid mutator transaction binding the contract method 0x960b11f5.
//
// Solidity: function addProvidersFor(uint256 ein, address[] providers) returns()
func (_Identityregistry *IdentityregistrySession) AddProvidersFor(ein *big.Int, providers []common.Address) (*types.Transaction, error) {
	return _Identityregistry.Contract.AddProvidersFor(&_Identityregistry.TransactOpts, ein, providers)
}

// AddProvidersFor is a paid mutator transaction binding the contract method 0x960b11f5.
//
// Solidity: function addProvidersFor(uint256 ein, address[] providers) returns()
func (_Identityregistry *IdentityregistryTransactorSession) AddProvidersFor(ein *big.Int, providers []common.Address) (*types.Transaction, error) {
	return _Identityregistry.Contract.AddProvidersFor(&_Identityregistry.TransactOpts, ein, providers)
}

// AddResolvers is a paid mutator transaction binding the contract method 0xe846fd91.
//
// Solidity: function addResolvers(address[] resolvers) returns()
func (_Identityregistry *IdentityregistryTransactor) AddResolvers(opts *bind.TransactOpts, resolvers []common.Address) (*types.Transaction, error) {
	return _Identityregistry.contract.Transact(opts, "addResolvers", resolvers)
}

// AddResolvers is a paid mutator transaction binding the contract method 0xe846fd91.
//
// Solidity: function addResolvers(address[] resolvers) returns()
func (_Identityregistry *IdentityregistrySession) AddResolvers(resolvers []common.Address) (*types.Transaction, error) {
	return _Identityregistry.Contract.AddResolvers(&_Identityregistry.TransactOpts, resolvers)
}

// AddResolvers is a paid mutator transaction binding the contract method 0xe846fd91.
//
// Solidity: function addResolvers(address[] resolvers) returns()
func (_Identityregistry *IdentityregistryTransactorSession) AddResolvers(resolvers []common.Address) (*types.Transaction, error) {
	return _Identityregistry.Contract.AddResolvers(&_Identityregistry.TransactOpts, resolvers)
}

// AddResolversFor is a paid mutator transaction binding the contract method 0x010887dc.
//
// Solidity: function addResolversFor(uint256 ein, address[] resolvers) returns()
func (_Identityregistry *IdentityregistryTransactor) AddResolversFor(opts *bind.TransactOpts, ein *big.Int, resolvers []common.Address) (*types.Transaction, error) {
	return _Identityregistry.contract.Transact(opts, "addResolversFor", ein, resolvers)
}

// AddResolversFor is a paid mutator transaction binding the contract method 0x010887dc.
//
// Solidity: function addResolversFor(uint256 ein, address[] resolvers) returns()
func (_Identityregistry *IdentityregistrySession) AddResolversFor(ein *big.Int, resolvers []common.Address) (*types.Transaction, error) {
	return _Identityregistry.Contract.AddResolversFor(&_Identityregistry.TransactOpts, ein, resolvers)
}

// AddResolversFor is a paid mutator transaction binding the contract method 0x010887dc.
//
// Solidity: function addResolversFor(uint256 ein, address[] resolvers) returns()
func (_Identityregistry *IdentityregistryTransactorSession) AddResolversFor(ein *big.Int, resolvers []common.Address) (*types.Transaction, error) {
	return _Identityregistry.Contract.AddResolversFor(&_Identityregistry.TransactOpts, ein, resolvers)
}

// CreateIdentity is a paid mutator transaction binding the contract method 0x268e8970.
//
// Solidity: function createIdentity(address recoveryAddress, address[] providers, address[] resolvers) returns(uint256 ein)
func (_Identityregistry *IdentityregistryTransactor) CreateIdentity(opts *bind.TransactOpts, recoveryAddress common.Address, providers []common.Address, resolvers []common.Address) (*types.Transaction, error) {
	return _Identityregistry.contract.Transact(opts, "createIdentity", recoveryAddress, providers, resolvers)
}

// CreateIdentity is a paid mutator transaction binding the contract method 0x268e8970.
//
// Solidity: function createIdentity(address recoveryAddress, address[] providers, address[] resolvers) returns(uint256 ein)
func (_Identityregistry *IdentityregistrySession) CreateIdentity(recoveryAddress common.Address, providers []common.Address, resolvers []common.Address) (*types.Transaction, error) {
	return _Identityregistry.Contract.CreateIdentity(&_Identityregistry.TransactOpts, recoveryAddress, providers, resolvers)
}

// CreateIdentity is a paid mutator transaction binding the contract method 0x268e8970.
//
// Solidity: function createIdentity(address recoveryAddress, address[] providers, address[] resolvers) returns(uint256 ein)
func (_Identityregistry *IdentityregistryTransactorSession) CreateIdentity(recoveryAddress common.Address, providers []common.Address, resolvers []common.Address) (*types.Transaction, error) {
	return _Identityregistry.Contract.CreateIdentity(&_Identityregistry.TransactOpts, recoveryAddress, providers, resolvers)
}

// CreateIdentityDelegated is a paid mutator transaction binding the contract method 0x14fb5646.
//
// Solidity: function createIdentityDelegated(address recoveryAddress, address associatedAddress, address[] providers, address[] resolvers, uint8 v, bytes32 r, bytes32 s, uint256 timestamp) returns(uint256 ein)
func (_Identityregistry *IdentityregistryTransactor) CreateIdentityDelegated(opts *bind.TransactOpts, recoveryAddress common.Address, associatedAddress common.Address, providers []common.Address, resolvers []common.Address, v uint8, r [32]byte, s [32]byte, timestamp *big.Int) (*types.Transaction, error) {
	return _Identityregistry.contract.Transact(opts, "createIdentityDelegated", recoveryAddress, associatedAddress, providers, resolvers, v, r, s, timestamp)
}

// CreateIdentityDelegated is a paid mutator transaction binding the contract method 0x14fb5646.
//
// Solidity: function createIdentityDelegated(address recoveryAddress, address associatedAddress, address[] providers, address[] resolvers, uint8 v, bytes32 r, bytes32 s, uint256 timestamp) returns(uint256 ein)
func (_Identityregistry *IdentityregistrySession) CreateIdentityDelegated(recoveryAddress common.Address, associatedAddress common.Address, providers []common.Address, resolvers []common.Address, v uint8, r [32]byte, s [32]byte, timestamp *big.Int) (*types.Transaction, error) {
	return _Identityregistry.Contract.CreateIdentityDelegated(&_Identityregistry.TransactOpts, recoveryAddress, associatedAddress, providers, resolvers, v, r, s, timestamp)
}

// CreateIdentityDelegated is a paid mutator transaction binding the contract method 0x14fb5646.
//
// Solidity: function createIdentityDelegated(address recoveryAddress, address associatedAddress, address[] providers, address[] resolvers, uint8 v, bytes32 r, bytes32 s, uint256 timestamp) returns(uint256 ein)
func (_Identityregistry *IdentityregistryTransactorSession) CreateIdentityDelegated(recoveryAddress common.Address, associatedAddress common.Address, providers []common.Address, resolvers []common.Address, v uint8, r [32]byte, s [32]byte, timestamp *big.Int) (*types.Transaction, error) {
	return _Identityregistry.Contract.CreateIdentityDelegated(&_Identityregistry.TransactOpts, recoveryAddress, associatedAddress, providers, resolvers, v, r, s, timestamp)
}

// RemoveAssociatedAddress is a paid mutator transaction binding the contract method 0x3b4656a1.
//
// Solidity: function removeAssociatedAddress() returns()
func (_Identityregistry *IdentityregistryTransactor) RemoveAssociatedAddress(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Identityregistry.contract.Transact(opts, "removeAssociatedAddress")
}

// RemoveAssociatedAddress is a paid mutator transaction binding the contract method 0x3b4656a1.
//
// Solidity: function removeAssociatedAddress() returns()
func (_Identityregistry *IdentityregistrySession) RemoveAssociatedAddress() (*types.Transaction, error) {
	return _Identityregistry.Contract.RemoveAssociatedAddress(&_Identityregistry.TransactOpts)
}

// RemoveAssociatedAddress is a paid mutator transaction binding the contract method 0x3b4656a1.
//
// Solidity: function removeAssociatedAddress() returns()
func (_Identityregistry *IdentityregistryTransactorSession) RemoveAssociatedAddress() (*types.Transaction, error) {
	return _Identityregistry.Contract.RemoveAssociatedAddress(&_Identityregistry.TransactOpts)
}

// RemoveAssociatedAddressDelegated is a paid mutator transaction binding the contract method 0xdd9ad9ed.
//
// Solidity: function removeAssociatedAddressDelegated(address addressToRemove, uint8 v, bytes32 r, bytes32 s, uint256 timestamp) returns()
func (_Identityregistry *IdentityregistryTransactor) RemoveAssociatedAddressDelegated(opts *bind.TransactOpts, addressToRemove common.Address, v uint8, r [32]byte, s [32]byte, timestamp *big.Int) (*types.Transaction, error) {
	return _Identityregistry.contract.Transact(opts, "removeAssociatedAddressDelegated", addressToRemove, v, r, s, timestamp)
}

// RemoveAssociatedAddressDelegated is a paid mutator transaction binding the contract method 0xdd9ad9ed.
//
// Solidity: function removeAssociatedAddressDelegated(address addressToRemove, uint8 v, bytes32 r, bytes32 s, uint256 timestamp) returns()
func (_Identityregistry *IdentityregistrySession) RemoveAssociatedAddressDelegated(addressToRemove common.Address, v uint8, r [32]byte, s [32]byte, timestamp *big.Int) (*types.Transaction, error) {
	return _Identityregistry.Contract.RemoveAssociatedAddressDelegated(&_Identityregistry.TransactOpts, addressToRemove, v, r, s, timestamp)
}

// RemoveAssociatedAddressDelegated is a paid mutator transaction binding the contract method 0xdd9ad9ed.
//
// Solidity: function removeAssociatedAddressDelegated(address addressToRemove, uint8 v, bytes32 r, bytes32 s, uint256 timestamp) returns()
func (_Identityregistry *IdentityregistryTransactorSession) RemoveAssociatedAddressDelegated(addressToRemove common.Address, v uint8, r [32]byte, s [32]byte, timestamp *big.Int) (*types.Transaction, error) {
	return _Identityregistry.Contract.RemoveAssociatedAddressDelegated(&_Identityregistry.TransactOpts, addressToRemove, v, r, s, timestamp)
}

// RemoveProviders is a paid mutator transaction binding the contract method 0x232e7d83.
//
// Solidity: function removeProviders(address[] providers) returns()
func (_Identityregistry *IdentityregistryTransactor) RemoveProviders(opts *bind.TransactOpts, providers []common.Address) (*types.Transaction, error) {
	return _Identityregistry.contract.Transact(opts, "removeProviders", providers)
}

// RemoveProviders is a paid mutator transaction binding the contract method 0x232e7d83.
//
// Solidity: function removeProviders(address[] providers) returns()
func (_Identityregistry *IdentityregistrySession) RemoveProviders(providers []common.Address) (*types.Transaction, error) {
	return _Identityregistry.Contract.RemoveProviders(&_Identityregistry.TransactOpts, providers)
}

// RemoveProviders is a paid mutator transaction binding the contract method 0x232e7d83.
//
// Solidity: function removeProviders(address[] providers) returns()
func (_Identityregistry *IdentityregistryTransactorSession) RemoveProviders(providers []common.Address) (*types.Transaction, error) {
	return _Identityregistry.Contract.RemoveProviders(&_Identityregistry.TransactOpts, providers)
}

// RemoveProvidersFor is a paid mutator transaction binding the contract method 0x06c93c36.
//
// Solidity: function removeProvidersFor(uint256 ein, address[] providers) returns()
func (_Identityregistry *IdentityregistryTransactor) RemoveProvidersFor(opts *bind.TransactOpts, ein *big.Int, providers []common.Address) (*types.Transaction, error) {
	return _Identityregistry.contract.Transact(opts, "removeProvidersFor", ein, providers)
}

// RemoveProvidersFor is a paid mutator transaction binding the contract method 0x06c93c36.
//
// Solidity: function removeProvidersFor(uint256 ein, address[] providers) returns()
func (_Identityregistry *IdentityregistrySession) RemoveProvidersFor(ein *big.Int, providers []common.Address) (*types.Transaction, error) {
	return _Identityregistry.Contract.RemoveProvidersFor(&_Identityregistry.TransactOpts, ein, providers)
}

// RemoveProvidersFor is a paid mutator transaction binding the contract method 0x06c93c36.
//
// Solidity: function removeProvidersFor(uint256 ein, address[] providers) returns()
func (_Identityregistry *IdentityregistryTransactorSession) RemoveProvidersFor(ein *big.Int, providers []common.Address) (*types.Transaction, error) {
	return _Identityregistry.Contract.RemoveProvidersFor(&_Identityregistry.TransactOpts, ein, providers)
}

// RemoveResolvers is a paid mutator transaction binding the contract method 0xb8a5c2a6.
//
// Solidity: function removeResolvers(address[] resolvers) returns()
func (_Identityregistry *IdentityregistryTransactor) RemoveResolvers(opts *bind.TransactOpts, resolvers []common.Address) (*types.Transaction, error) {
	return _Identityregistry.contract.Transact(opts, "removeResolvers", resolvers)
}

// RemoveResolvers is a paid mutator transaction binding the contract method 0xb8a5c2a6.
//
// Solidity: function removeResolvers(address[] resolvers) returns()
func (_Identityregistry *IdentityregistrySession) RemoveResolvers(resolvers []common.Address) (*types.Transaction, error) {
	return _Identityregistry.Contract.RemoveResolvers(&_Identityregistry.TransactOpts, resolvers)
}

// RemoveResolvers is a paid mutator transaction binding the contract method 0xb8a5c2a6.
//
// Solidity: function removeResolvers(address[] resolvers) returns()
func (_Identityregistry *IdentityregistryTransactorSession) RemoveResolvers(resolvers []common.Address) (*types.Transaction, error) {
	return _Identityregistry.Contract.RemoveResolvers(&_Identityregistry.TransactOpts, resolvers)
}

// RemoveResolversFor is a paid mutator transaction binding the contract method 0x5726f660.
//
// Solidity: function removeResolversFor(uint256 ein, address[] resolvers) returns()
func (_Identityregistry *IdentityregistryTransactor) RemoveResolversFor(opts *bind.TransactOpts, ein *big.Int, resolvers []common.Address) (*types.Transaction, error) {
	return _Identityregistry.contract.Transact(opts, "removeResolversFor", ein, resolvers)
}

// RemoveResolversFor is a paid mutator transaction binding the contract method 0x5726f660.
//
// Solidity: function removeResolversFor(uint256 ein, address[] resolvers) returns()
func (_Identityregistry *IdentityregistrySession) RemoveResolversFor(ein *big.Int, resolvers []common.Address) (*types.Transaction, error) {
	return _Identityregistry.Contract.RemoveResolversFor(&_Identityregistry.TransactOpts, ein, resolvers)
}

// RemoveResolversFor is a paid mutator transaction binding the contract method 0x5726f660.
//
// Solidity: function removeResolversFor(uint256 ein, address[] resolvers) returns()
func (_Identityregistry *IdentityregistryTransactorSession) RemoveResolversFor(ein *big.Int, resolvers []common.Address) (*types.Transaction, error) {
	return _Identityregistry.Contract.RemoveResolversFor(&_Identityregistry.TransactOpts, ein, resolvers)
}

// TriggerDestruction is a paid mutator transaction binding the contract method 0xfa57b576.
//
// Solidity: function triggerDestruction(uint256 ein, address[] firstChunk, address[] lastChunk, bool resetResolvers) returns()
func (_Identityregistry *IdentityregistryTransactor) TriggerDestruction(opts *bind.TransactOpts, ein *big.Int, firstChunk []common.Address, lastChunk []common.Address, resetResolvers bool) (*types.Transaction, error) {
	return _Identityregistry.contract.Transact(opts, "triggerDestruction", ein, firstChunk, lastChunk, resetResolvers)
}

// TriggerDestruction is a paid mutator transaction binding the contract method 0xfa57b576.
//
// Solidity: function triggerDestruction(uint256 ein, address[] firstChunk, address[] lastChunk, bool resetResolvers) returns()
func (_Identityregistry *IdentityregistrySession) TriggerDestruction(ein *big.Int, firstChunk []common.Address, lastChunk []common.Address, resetResolvers bool) (*types.Transaction, error) {
	return _Identityregistry.Contract.TriggerDestruction(&_Identityregistry.TransactOpts, ein, firstChunk, lastChunk, resetResolvers)
}

// TriggerDestruction is a paid mutator transaction binding the contract method 0xfa57b576.
//
// Solidity: function triggerDestruction(uint256 ein, address[] firstChunk, address[] lastChunk, bool resetResolvers) returns()
func (_Identityregistry *IdentityregistryTransactorSession) TriggerDestruction(ein *big.Int, firstChunk []common.Address, lastChunk []common.Address, resetResolvers bool) (*types.Transaction, error) {
	return _Identityregistry.Contract.TriggerDestruction(&_Identityregistry.TransactOpts, ein, firstChunk, lastChunk, resetResolvers)
}

// TriggerRecovery is a paid mutator transaction binding the contract method 0x8e1bb633.
//
// Solidity: function triggerRecovery(uint256 ein, address newAssociatedAddress, uint8 v, bytes32 r, bytes32 s, uint256 timestamp) returns()
func (_Identityregistry *IdentityregistryTransactor) TriggerRecovery(opts *bind.TransactOpts, ein *big.Int, newAssociatedAddress common.Address, v uint8, r [32]byte, s [32]byte, timestamp *big.Int) (*types.Transaction, error) {
	return _Identityregistry.contract.Transact(opts, "triggerRecovery", ein, newAssociatedAddress, v, r, s, timestamp)
}

// TriggerRecovery is a paid mutator transaction binding the contract method 0x8e1bb633.
//
// Solidity: function triggerRecovery(uint256 ein, address newAssociatedAddress, uint8 v, bytes32 r, bytes32 s, uint256 timestamp) returns()
func (_Identityregistry *IdentityregistrySession) TriggerRecovery(ein *big.Int, newAssociatedAddress common.Address, v uint8, r [32]byte, s [32]byte, timestamp *big.Int) (*types.Transaction, error) {
	return _Identityregistry.Contract.TriggerRecovery(&_Identityregistry.TransactOpts, ein, newAssociatedAddress, v, r, s, timestamp)
}

// TriggerRecovery is a paid mutator transaction binding the contract method 0x8e1bb633.
//
// Solidity: function triggerRecovery(uint256 ein, address newAssociatedAddress, uint8 v, bytes32 r, bytes32 s, uint256 timestamp) returns()
func (_Identityregistry *IdentityregistryTransactorSession) TriggerRecovery(ein *big.Int, newAssociatedAddress common.Address, v uint8, r [32]byte, s [32]byte, timestamp *big.Int) (*types.Transaction, error) {
	return _Identityregistry.Contract.TriggerRecovery(&_Identityregistry.TransactOpts, ein, newAssociatedAddress, v, r, s, timestamp)
}

// TriggerRecoveryAddressChange is a paid mutator transaction binding the contract method 0x1bfe3508.
//
// Solidity: function triggerRecoveryAddressChange(address newRecoveryAddress) returns()
func (_Identityregistry *IdentityregistryTransactor) TriggerRecoveryAddressChange(opts *bind.TransactOpts, newRecoveryAddress common.Address) (*types.Transaction, error) {
	return _Identityregistry.contract.Transact(opts, "triggerRecoveryAddressChange", newRecoveryAddress)
}

// TriggerRecoveryAddressChange is a paid mutator transaction binding the contract method 0x1bfe3508.
//
// Solidity: function triggerRecoveryAddressChange(address newRecoveryAddress) returns()
func (_Identityregistry *IdentityregistrySession) TriggerRecoveryAddressChange(newRecoveryAddress common.Address) (*types.Transaction, error) {
	return _Identityregistry.Contract.TriggerRecoveryAddressChange(&_Identityregistry.TransactOpts, newRecoveryAddress)
}

// TriggerRecoveryAddressChange is a paid mutator transaction binding the contract method 0x1bfe3508.
//
// Solidity: function triggerRecoveryAddressChange(address newRecoveryAddress) returns()
func (_Identityregistry *IdentityregistryTransactorSession) TriggerRecoveryAddressChange(newRecoveryAddress common.Address) (*types.Transaction, error) {
	return _Identityregistry.Contract.TriggerRecoveryAddressChange(&_Identityregistry.TransactOpts, newRecoveryAddress)
}

// TriggerRecoveryAddressChangeFor is a paid mutator transaction binding the contract method 0x2501faa5.
//
// Solidity: function triggerRecoveryAddressChangeFor(uint256 ein, address newRecoveryAddress) returns()
func (_Identityregistry *IdentityregistryTransactor) TriggerRecoveryAddressChangeFor(opts *bind.TransactOpts, ein *big.Int, newRecoveryAddress common.Address) (*types.Transaction, error) {
	return _Identityregistry.contract.Transact(opts, "triggerRecoveryAddressChangeFor", ein, newRecoveryAddress)
}

// TriggerRecoveryAddressChangeFor is a paid mutator transaction binding the contract method 0x2501faa5.
//
// Solidity: function triggerRecoveryAddressChangeFor(uint256 ein, address newRecoveryAddress) returns()
func (_Identityregistry *IdentityregistrySession) TriggerRecoveryAddressChangeFor(ein *big.Int, newRecoveryAddress common.Address) (*types.Transaction, error) {
	return _Identityregistry.Contract.TriggerRecoveryAddressChangeFor(&_Identityregistry.TransactOpts, ein, newRecoveryAddress)
}

// TriggerRecoveryAddressChangeFor is a paid mutator transaction binding the contract method 0x2501faa5.
//
// Solidity: function triggerRecoveryAddressChangeFor(uint256 ein, address newRecoveryAddress) returns()
func (_Identityregistry *IdentityregistryTransactorSession) TriggerRecoveryAddressChangeFor(ein *big.Int, newRecoveryAddress common.Address) (*types.Transaction, error) {
	return _Identityregistry.Contract.TriggerRecoveryAddressChangeFor(&_Identityregistry.TransactOpts, ein, newRecoveryAddress)
}

// IdentityregistryAssociatedAddressAddedIterator is returned from FilterAssociatedAddressAdded and is used to iterate over the raw logs and unpacked data for AssociatedAddressAdded events raised by the Identityregistry contract.
type IdentityregistryAssociatedAddressAddedIterator struct {
	Event *IdentityregistryAssociatedAddressAdded // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *IdentityregistryAssociatedAddressAddedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(IdentityregistryAssociatedAddressAdded)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(IdentityregistryAssociatedAddressAdded)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *IdentityregistryAssociatedAddressAddedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *IdentityregistryAssociatedAddressAddedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// IdentityregistryAssociatedAddressAdded represents a AssociatedAddressAdded event raised by the Identityregistry contract.
type IdentityregistryAssociatedAddressAdded struct {
	Initiator        common.Address
	Ein              *big.Int
	ApprovingAddress common.Address
	AddedAddress     common.Address
	Delegated        bool
	Raw              types.Log // Blockchain specific contextual infos
}

// FilterAssociatedAddressAdded is a free log retrieval operation binding the contract event 0x1e0c87f4d9edce88868577315152d327d02ff25d2cb9384cd6ee609a9f56b64e.
//
// Solidity: event AssociatedAddressAdded(address indexed initiator, uint256 indexed ein, address approvingAddress, address addedAddress, bool delegated)
func (_Identityregistry *IdentityregistryFilterer) FilterAssociatedAddressAdded(opts *bind.FilterOpts, initiator []common.Address, ein []*big.Int) (*IdentityregistryAssociatedAddressAddedIterator, error) {

	var initiatorRule []interface{}
	for _, initiatorItem := range initiator {
		initiatorRule = append(initiatorRule, initiatorItem)
	}
	var einRule []interface{}
	for _, einItem := range ein {
		einRule = append(einRule, einItem)
	}

	logs, sub, err := _Identityregistry.contract.FilterLogs(opts, "AssociatedAddressAdded", initiatorRule, einRule)
	if err != nil {
		return nil, err
	}
	return &IdentityregistryAssociatedAddressAddedIterator{contract: _Identityregistry.contract, event: "AssociatedAddressAdded", logs: logs, sub: sub}, nil
}

// WatchAssociatedAddressAdded is a free log subscription operation binding the contract event 0x1e0c87f4d9edce88868577315152d327d02ff25d2cb9384cd6ee609a9f56b64e.
//
// Solidity: event AssociatedAddressAdded(address indexed initiator, uint256 indexed ein, address approvingAddress, address addedAddress, bool delegated)
func (_Identityregistry *IdentityregistryFilterer) WatchAssociatedAddressAdded(opts *bind.WatchOpts, sink chan<- *IdentityregistryAssociatedAddressAdded, initiator []common.Address, ein []*big.Int) (event.Subscription, error) {

	var initiatorRule []interface{}
	for _, initiatorItem := range initiator {
		initiatorRule = append(initiatorRule, initiatorItem)
	}
	var einRule []interface{}
	for _, einItem := range ein {
		einRule = append(einRule, einItem)
	}

	logs, sub, err := _Identityregistry.contract.WatchLogs(opts, "AssociatedAddressAdded", initiatorRule, einRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(IdentityregistryAssociatedAddressAdded)
				if err := _Identityregistry.contract.UnpackLog(event, "AssociatedAddressAdded", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// IdentityregistryAssociatedAddressRemovedIterator is returned from FilterAssociatedAddressRemoved and is used to iterate over the raw logs and unpacked data for AssociatedAddressRemoved events raised by the Identityregistry contract.
type IdentityregistryAssociatedAddressRemovedIterator struct {
	Event *IdentityregistryAssociatedAddressRemoved // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *IdentityregistryAssociatedAddressRemovedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(IdentityregistryAssociatedAddressRemoved)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(IdentityregistryAssociatedAddressRemoved)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *IdentityregistryAssociatedAddressRemovedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *IdentityregistryAssociatedAddressRemovedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// IdentityregistryAssociatedAddressRemoved represents a AssociatedAddressRemoved event raised by the Identityregistry contract.
type IdentityregistryAssociatedAddressRemoved struct {
	Initiator      common.Address
	Ein            *big.Int
	RemovedAddress common.Address
	Delegated      bool
	Raw            types.Log // Blockchain specific contextual infos
}

// FilterAssociatedAddressRemoved is a free log retrieval operation binding the contract event 0x04095b6a64a9a32bafa887e731a82f91cdec3bf819389deea6aa34a488034f7d.
//
// Solidity: event AssociatedAddressRemoved(address indexed initiator, uint256 indexed ein, address removedAddress, bool delegated)
func (_Identityregistry *IdentityregistryFilterer) FilterAssociatedAddressRemoved(opts *bind.FilterOpts, initiator []common.Address, ein []*big.Int) (*IdentityregistryAssociatedAddressRemovedIterator, error) {

	var initiatorRule []interface{}
	for _, initiatorItem := range initiator {
		initiatorRule = append(initiatorRule, initiatorItem)
	}
	var einRule []interface{}
	for _, einItem := range ein {
		einRule = append(einRule, einItem)
	}

	logs, sub, err := _Identityregistry.contract.FilterLogs(opts, "AssociatedAddressRemoved", initiatorRule, einRule)
	if err != nil {
		return nil, err
	}
	return &IdentityregistryAssociatedAddressRemovedIterator{contract: _Identityregistry.contract, event: "AssociatedAddressRemoved", logs: logs, sub: sub}, nil
}

// WatchAssociatedAddressRemoved is a free log subscription operation binding the contract event 0x04095b6a64a9a32bafa887e731a82f91cdec3bf819389deea6aa34a488034f7d.
//
// Solidity: event AssociatedAddressRemoved(address indexed initiator, uint256 indexed ein, address removedAddress, bool delegated)
func (_Identityregistry *IdentityregistryFilterer) WatchAssociatedAddressRemoved(opts *bind.WatchOpts, sink chan<- *IdentityregistryAssociatedAddressRemoved, initiator []common.Address, ein []*big.Int) (event.Subscription, error) {

	var initiatorRule []interface{}
	for _, initiatorItem := range initiator {
		initiatorRule = append(initiatorRule, initiatorItem)
	}
	var einRule []interface{}
	for _, einItem := range ein {
		einRule = append(einRule, einItem)
	}

	logs, sub, err := _Identityregistry.contract.WatchLogs(opts, "AssociatedAddressRemoved", initiatorRule, einRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(IdentityregistryAssociatedAddressRemoved)
				if err := _Identityregistry.contract.UnpackLog(event, "AssociatedAddressRemoved", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// IdentityregistryIdentityCreatedIterator is returned from FilterIdentityCreated and is used to iterate over the raw logs and unpacked data for IdentityCreated events raised by the Identityregistry contract.
type IdentityregistryIdentityCreatedIterator struct {
	Event *IdentityregistryIdentityCreated // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *IdentityregistryIdentityCreatedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(IdentityregistryIdentityCreated)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(IdentityregistryIdentityCreated)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *IdentityregistryIdentityCreatedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *IdentityregistryIdentityCreatedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// IdentityregistryIdentityCreated represents a IdentityCreated event raised by the Identityregistry contract.
type IdentityregistryIdentityCreated struct {
	Initiator         common.Address
	Ein               *big.Int
	RecoveryAddress   common.Address
	AssociatedAddress common.Address
	Providers         []common.Address
	Resolvers         []common.Address
	Delegated         bool
	Raw               types.Log // Blockchain specific contextual infos
}

// FilterIdentityCreated is a free log retrieval operation binding the contract event 0xe541733a4670852051762d3cdb7d9123bea21d01e252aa39ca403c8d0f5ab66c.
//
// Solidity: event IdentityCreated(address indexed initiator, uint256 indexed ein, address recoveryAddress, address associatedAddress, address[] providers, address[] resolvers, bool delegated)
func (_Identityregistry *IdentityregistryFilterer) FilterIdentityCreated(opts *bind.FilterOpts, initiator []common.Address, ein []*big.Int) (*IdentityregistryIdentityCreatedIterator, error) {

	var initiatorRule []interface{}
	for _, initiatorItem := range initiator {
		initiatorRule = append(initiatorRule, initiatorItem)
	}
	var einRule []interface{}
	for _, einItem := range ein {
		einRule = append(einRule, einItem)
	}

	logs, sub, err := _Identityregistry.contract.FilterLogs(opts, "IdentityCreated", initiatorRule, einRule)
	if err != nil {
		return nil, err
	}
	return &IdentityregistryIdentityCreatedIterator{contract: _Identityregistry.contract, event: "IdentityCreated", logs: logs, sub: sub}, nil
}

// WatchIdentityCreated is a free log subscription operation binding the contract event 0xe541733a4670852051762d3cdb7d9123bea21d01e252aa39ca403c8d0f5ab66c.
//
// Solidity: event IdentityCreated(address indexed initiator, uint256 indexed ein, address recoveryAddress, address associatedAddress, address[] providers, address[] resolvers, bool delegated)
func (_Identityregistry *IdentityregistryFilterer) WatchIdentityCreated(opts *bind.WatchOpts, sink chan<- *IdentityregistryIdentityCreated, initiator []common.Address, ein []*big.Int) (event.Subscription, error) {

	var initiatorRule []interface{}
	for _, initiatorItem := range initiator {
		initiatorRule = append(initiatorRule, initiatorItem)
	}
	var einRule []interface{}
	for _, einItem := range ein {
		einRule = append(einRule, einItem)
	}

	logs, sub, err := _Identityregistry.contract.WatchLogs(opts, "IdentityCreated", initiatorRule, einRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(IdentityregistryIdentityCreated)
				if err := _Identityregistry.contract.UnpackLog(event, "IdentityCreated", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// IdentityregistryIdentityDestroyedIterator is returned from FilterIdentityDestroyed and is used to iterate over the raw logs and unpacked data for IdentityDestroyed events raised by the Identityregistry contract.
type IdentityregistryIdentityDestroyedIterator struct {
	Event *IdentityregistryIdentityDestroyed // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *IdentityregistryIdentityDestroyedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(IdentityregistryIdentityDestroyed)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(IdentityregistryIdentityDestroyed)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *IdentityregistryIdentityDestroyedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *IdentityregistryIdentityDestroyedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// IdentityregistryIdentityDestroyed represents a IdentityDestroyed event raised by the Identityregistry contract.
type IdentityregistryIdentityDestroyed struct {
	Initiator       common.Address
	Ein             *big.Int
	RecoveryAddress common.Address
	ResolversReset  bool
	Raw             types.Log // Blockchain specific contextual infos
}

// FilterIdentityDestroyed is a free log retrieval operation binding the contract event 0x1807cc67f627d55c0a797a6c603fa124978caf5bb45c1748329489fd0185b9ef.
//
// Solidity: event IdentityDestroyed(address indexed initiator, uint256 indexed ein, address recoveryAddress, bool resolversReset)
func (_Identityregistry *IdentityregistryFilterer) FilterIdentityDestroyed(opts *bind.FilterOpts, initiator []common.Address, ein []*big.Int) (*IdentityregistryIdentityDestroyedIterator, error) {

	var initiatorRule []interface{}
	for _, initiatorItem := range initiator {
		initiatorRule = append(initiatorRule, initiatorItem)
	}
	var einRule []interface{}
	for _, einItem := range ein {
		einRule = append(einRule, einItem)
	}

	logs, sub, err := _Identityregistry.contract.FilterLogs(opts, "IdentityDestroyed", initiatorRule, einRule)
	if err != nil {
		return nil, err
	}
	return &IdentityregistryIdentityDestroyedIterator{contract: _Identityregistry.contract, event: "IdentityDestroyed", logs: logs, sub: sub}, nil
}

// WatchIdentityDestroyed is a free log subscription operation binding the contract event 0x1807cc67f627d55c0a797a6c603fa124978caf5bb45c1748329489fd0185b9ef.
//
// Solidity: event IdentityDestroyed(address indexed initiator, uint256 indexed ein, address recoveryAddress, bool resolversReset)
func (_Identityregistry *IdentityregistryFilterer) WatchIdentityDestroyed(opts *bind.WatchOpts, sink chan<- *IdentityregistryIdentityDestroyed, initiator []common.Address, ein []*big.Int) (event.Subscription, error) {

	var initiatorRule []interface{}
	for _, initiatorItem := range initiator {
		initiatorRule = append(initiatorRule, initiatorItem)
	}
	var einRule []interface{}
	for _, einItem := range ein {
		einRule = append(einRule, einItem)
	}

	logs, sub, err := _Identityregistry.contract.WatchLogs(opts, "IdentityDestroyed", initiatorRule, einRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(IdentityregistryIdentityDestroyed)
				if err := _Identityregistry.contract.UnpackLog(event, "IdentityDestroyed", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// IdentityregistryProviderAddedIterator is returned from FilterProviderAdded and is used to iterate over the raw logs and unpacked data for ProviderAdded events raised by the Identityregistry contract.
type IdentityregistryProviderAddedIterator struct {
	Event *IdentityregistryProviderAdded // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *IdentityregistryProviderAddedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(IdentityregistryProviderAdded)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(IdentityregistryProviderAdded)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *IdentityregistryProviderAddedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *IdentityregistryProviderAddedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// IdentityregistryProviderAdded represents a ProviderAdded event raised by the Identityregistry contract.
type IdentityregistryProviderAdded struct {
	Initiator common.Address
	Ein       *big.Int
	Provider  common.Address
	Delegated bool
	Raw       types.Log // Blockchain specific contextual infos
}

// FilterProviderAdded is a free log retrieval operation binding the contract event 0xd2af86288d6ec28d93c5459bdc5a21da89b340c28ad430327e40139c1178986f.
//
// Solidity: event ProviderAdded(address indexed initiator, uint256 indexed ein, address provider, bool delegated)
func (_Identityregistry *IdentityregistryFilterer) FilterProviderAdded(opts *bind.FilterOpts, initiator []common.Address, ein []*big.Int) (*IdentityregistryProviderAddedIterator, error) {

	var initiatorRule []interface{}
	for _, initiatorItem := range initiator {
		initiatorRule = append(initiatorRule, initiatorItem)
	}
	var einRule []interface{}
	for _, einItem := range ein {
		einRule = append(einRule, einItem)
	}

	logs, sub, err := _Identityregistry.contract.FilterLogs(opts, "ProviderAdded", initiatorRule, einRule)
	if err != nil {
		return nil, err
	}
	return &IdentityregistryProviderAddedIterator{contract: _Identityregistry.contract, event: "ProviderAdded", logs: logs, sub: sub}, nil
}

// WatchProviderAdded is a free log subscription operation binding the contract event 0xd2af86288d6ec28d93c5459bdc5a21da89b340c28ad430327e40139c1178986f.
//
// Solidity: event ProviderAdded(address indexed initiator, uint256 indexed ein, address provider, bool delegated)
func (_Identityregistry *IdentityregistryFilterer) WatchProviderAdded(opts *bind.WatchOpts, sink chan<- *IdentityregistryProviderAdded, initiator []common.Address, ein []*big.Int) (event.Subscription, error) {

	var initiatorRule []interface{}
	for _, initiatorItem := range initiator {
		initiatorRule = append(initiatorRule, initiatorItem)
	}
	var einRule []interface{}
	for _, einItem := range ein {
		einRule = append(einRule, einItem)
	}

	logs, sub, err := _Identityregistry.contract.WatchLogs(opts, "ProviderAdded", initiatorRule, einRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(IdentityregistryProviderAdded)
				if err := _Identityregistry.contract.UnpackLog(event, "ProviderAdded", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// IdentityregistryProviderRemovedIterator is returned from FilterProviderRemoved and is used to iterate over the raw logs and unpacked data for ProviderRemoved events raised by the Identityregistry contract.
type IdentityregistryProviderRemovedIterator struct {
	Event *IdentityregistryProviderRemoved // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *IdentityregistryProviderRemovedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(IdentityregistryProviderRemoved)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(IdentityregistryProviderRemoved)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *IdentityregistryProviderRemovedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *IdentityregistryProviderRemovedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// IdentityregistryProviderRemoved represents a ProviderRemoved event raised by the Identityregistry contract.
type IdentityregistryProviderRemoved struct {
	Initiator common.Address
	Ein       *big.Int
	Provider  common.Address
	Delegated bool
	Raw       types.Log // Blockchain specific contextual infos
}

// FilterProviderRemoved is a free log retrieval operation binding the contract event 0xe41b11c1b8e658dea501b4a432bd3f7b3e6db83ef57ac16c52e5f288edeffec4.
//
// Solidity: event ProviderRemoved(address indexed initiator, uint256 indexed ein, address provider, bool delegated)
func (_Identityregistry *IdentityregistryFilterer) FilterProviderRemoved(opts *bind.FilterOpts, initiator []common.Address, ein []*big.Int) (*IdentityregistryProviderRemovedIterator, error) {

	var initiatorRule []interface{}
	for _, initiatorItem := range initiator {
		initiatorRule = append(initiatorRule, initiatorItem)
	}
	var einRule []interface{}
	for _, einItem := range ein {
		einRule = append(einRule, einItem)
	}

	logs, sub, err := _Identityregistry.contract.FilterLogs(opts, "ProviderRemoved", initiatorRule, einRule)
	if err != nil {
		return nil, err
	}
	return &IdentityregistryProviderRemovedIterator{contract: _Identityregistry.contract, event: "ProviderRemoved", logs: logs, sub: sub}, nil
}

// WatchProviderRemoved is a free log subscription operation binding the contract event 0xe41b11c1b8e658dea501b4a432bd3f7b3e6db83ef57ac16c52e5f288edeffec4.
//
// Solidity: event ProviderRemoved(address indexed initiator, uint256 indexed ein, address provider, bool delegated)
func (_Identityregistry *IdentityregistryFilterer) WatchProviderRemoved(opts *bind.WatchOpts, sink chan<- *IdentityregistryProviderRemoved, initiator []common.Address, ein []*big.Int) (event.Subscription, error) {

	var initiatorRule []interface{}
	for _, initiatorItem := range initiator {
		initiatorRule = append(initiatorRule, initiatorItem)
	}
	var einRule []interface{}
	for _, einItem := range ein {
		einRule = append(einRule, einItem)
	}

	logs, sub, err := _Identityregistry.contract.WatchLogs(opts, "ProviderRemoved", initiatorRule, einRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(IdentityregistryProviderRemoved)
				if err := _Identityregistry.contract.UnpackLog(event, "ProviderRemoved", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// IdentityregistryRecoveryAddressChangeTriggeredIterator is returned from FilterRecoveryAddressChangeTriggered and is used to iterate over the raw logs and unpacked data for RecoveryAddressChangeTriggered events raised by the Identityregistry contract.
type IdentityregistryRecoveryAddressChangeTriggeredIterator struct {
	Event *IdentityregistryRecoveryAddressChangeTriggered // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *IdentityregistryRecoveryAddressChangeTriggeredIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(IdentityregistryRecoveryAddressChangeTriggered)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(IdentityregistryRecoveryAddressChangeTriggered)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *IdentityregistryRecoveryAddressChangeTriggeredIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *IdentityregistryRecoveryAddressChangeTriggeredIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// IdentityregistryRecoveryAddressChangeTriggered represents a RecoveryAddressChangeTriggered event raised by the Identityregistry contract.
type IdentityregistryRecoveryAddressChangeTriggered struct {
	Initiator          common.Address
	Ein                *big.Int
	OldRecoveryAddress common.Address
	NewRecoveryAddress common.Address
	Delegated          bool
	Raw                types.Log // Blockchain specific contextual infos
}

// FilterRecoveryAddressChangeTriggered is a free log retrieval operation binding the contract event 0xd9d54f9caf1bb2f4f815d22df297e7b73291ee08a95df2d47b0b03378ebe7c5d.
//
// Solidity: event RecoveryAddressChangeTriggered(address indexed initiator, uint256 indexed ein, address oldRecoveryAddress, address newRecoveryAddress, bool delegated)
func (_Identityregistry *IdentityregistryFilterer) FilterRecoveryAddressChangeTriggered(opts *bind.FilterOpts, initiator []common.Address, ein []*big.Int) (*IdentityregistryRecoveryAddressChangeTriggeredIterator, error) {

	var initiatorRule []interface{}
	for _, initiatorItem := range initiator {
		initiatorRule = append(initiatorRule, initiatorItem)
	}
	var einRule []interface{}
	for _, einItem := range ein {
		einRule = append(einRule, einItem)
	}

	logs, sub, err := _Identityregistry.contract.FilterLogs(opts, "RecoveryAddressChangeTriggered", initiatorRule, einRule)
	if err != nil {
		return nil, err
	}
	return &IdentityregistryRecoveryAddressChangeTriggeredIterator{contract: _Identityregistry.contract, event: "RecoveryAddressChangeTriggered", logs: logs, sub: sub}, nil
}

// WatchRecoveryAddressChangeTriggered is a free log subscription operation binding the contract event 0xd9d54f9caf1bb2f4f815d22df297e7b73291ee08a95df2d47b0b03378ebe7c5d.
//
// Solidity: event RecoveryAddressChangeTriggered(address indexed initiator, uint256 indexed ein, address oldRecoveryAddress, address newRecoveryAddress, bool delegated)
func (_Identityregistry *IdentityregistryFilterer) WatchRecoveryAddressChangeTriggered(opts *bind.WatchOpts, sink chan<- *IdentityregistryRecoveryAddressChangeTriggered, initiator []common.Address, ein []*big.Int) (event.Subscription, error) {

	var initiatorRule []interface{}
	for _, initiatorItem := range initiator {
		initiatorRule = append(initiatorRule, initiatorItem)
	}
	var einRule []interface{}
	for _, einItem := range ein {
		einRule = append(einRule, einItem)
	}

	logs, sub, err := _Identityregistry.contract.WatchLogs(opts, "RecoveryAddressChangeTriggered", initiatorRule, einRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(IdentityregistryRecoveryAddressChangeTriggered)
				if err := _Identityregistry.contract.UnpackLog(event, "RecoveryAddressChangeTriggered", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// IdentityregistryRecoveryTriggeredIterator is returned from FilterRecoveryTriggered and is used to iterate over the raw logs and unpacked data for RecoveryTriggered events raised by the Identityregistry contract.
type IdentityregistryRecoveryTriggeredIterator struct {
	Event *IdentityregistryRecoveryTriggered // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *IdentityregistryRecoveryTriggeredIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(IdentityregistryRecoveryTriggered)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(IdentityregistryRecoveryTriggered)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *IdentityregistryRecoveryTriggeredIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *IdentityregistryRecoveryTriggeredIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// IdentityregistryRecoveryTriggered represents a RecoveryTriggered event raised by the Identityregistry contract.
type IdentityregistryRecoveryTriggered struct {
	Initiator              common.Address
	Ein                    *big.Int
	OldAssociatedAddresses []common.Address
	NewAssociatedAddress   common.Address
	Raw                    types.Log // Blockchain specific contextual infos
}

// FilterRecoveryTriggered is a free log retrieval operation binding the contract event 0x2fe95fbd211d0471c596b1f81d913d1389d5d1ddeb2bdd96143acc651aa3b02e.
//
// Solidity: event RecoveryTriggered(address indexed initiator, uint256 indexed ein, address[] oldAssociatedAddresses, address newAssociatedAddress)
func (_Identityregistry *IdentityregistryFilterer) FilterRecoveryTriggered(opts *bind.FilterOpts, initiator []common.Address, ein []*big.Int) (*IdentityregistryRecoveryTriggeredIterator, error) {

	var initiatorRule []interface{}
	for _, initiatorItem := range initiator {
		initiatorRule = append(initiatorRule, initiatorItem)
	}
	var einRule []interface{}
	for _, einItem := range ein {
		einRule = append(einRule, einItem)
	}

	logs, sub, err := _Identityregistry.contract.FilterLogs(opts, "RecoveryTriggered", initiatorRule, einRule)
	if err != nil {
		return nil, err
	}
	return &IdentityregistryRecoveryTriggeredIterator{contract: _Identityregistry.contract, event: "RecoveryTriggered", logs: logs, sub: sub}, nil
}

// WatchRecoveryTriggered is a free log subscription operation binding the contract event 0x2fe95fbd211d0471c596b1f81d913d1389d5d1ddeb2bdd96143acc651aa3b02e.
//
// Solidity: event RecoveryTriggered(address indexed initiator, uint256 indexed ein, address[] oldAssociatedAddresses, address newAssociatedAddress)
func (_Identityregistry *IdentityregistryFilterer) WatchRecoveryTriggered(opts *bind.WatchOpts, sink chan<- *IdentityregistryRecoveryTriggered, initiator []common.Address, ein []*big.Int) (event.Subscription, error) {

	var initiatorRule []interface{}
	for _, initiatorItem := range initiator {
		initiatorRule = append(initiatorRule, initiatorItem)
	}
	var einRule []interface{}
	for _, einItem := range ein {
		einRule = append(einRule, einItem)
	}

	logs, sub, err := _Identityregistry.contract.WatchLogs(opts, "RecoveryTriggered", initiatorRule, einRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(IdentityregistryRecoveryTriggered)
				if err := _Identityregistry.contract.UnpackLog(event, "RecoveryTriggered", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// IdentityregistryResolverAddedIterator is returned from FilterResolverAdded and is used to iterate over the raw logs and unpacked data for ResolverAdded events raised by the Identityregistry contract.
type IdentityregistryResolverAddedIterator struct {
	Event *IdentityregistryResolverAdded // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *IdentityregistryResolverAddedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(IdentityregistryResolverAdded)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(IdentityregistryResolverAdded)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *IdentityregistryResolverAddedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *IdentityregistryResolverAddedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// IdentityregistryResolverAdded represents a ResolverAdded event raised by the Identityregistry contract.
type IdentityregistryResolverAdded struct {
	Initiator common.Address
	Ein       *big.Int
	Resolvers common.Address
	Delegated bool
	Raw       types.Log // Blockchain specific contextual infos
}

// FilterResolverAdded is a free log retrieval operation binding the contract event 0x8d2c0379f93ea94639b25aaf145689b0db73ba107f5b9972bbd6238d7b0440ac.
//
// Solidity: event ResolverAdded(address indexed initiator, uint256 indexed ein, address resolvers, bool delegated)
func (_Identityregistry *IdentityregistryFilterer) FilterResolverAdded(opts *bind.FilterOpts, initiator []common.Address, ein []*big.Int) (*IdentityregistryResolverAddedIterator, error) {

	var initiatorRule []interface{}
	for _, initiatorItem := range initiator {
		initiatorRule = append(initiatorRule, initiatorItem)
	}
	var einRule []interface{}
	for _, einItem := range ein {
		einRule = append(einRule, einItem)
	}

	logs, sub, err := _Identityregistry.contract.FilterLogs(opts, "ResolverAdded", initiatorRule, einRule)
	if err != nil {
		return nil, err
	}
	return &IdentityregistryResolverAddedIterator{contract: _Identityregistry.contract, event: "ResolverAdded", logs: logs, sub: sub}, nil
}

// WatchResolverAdded is a free log subscription operation binding the contract event 0x8d2c0379f93ea94639b25aaf145689b0db73ba107f5b9972bbd6238d7b0440ac.
//
// Solidity: event ResolverAdded(address indexed initiator, uint256 indexed ein, address resolvers, bool delegated)
func (_Identityregistry *IdentityregistryFilterer) WatchResolverAdded(opts *bind.WatchOpts, sink chan<- *IdentityregistryResolverAdded, initiator []common.Address, ein []*big.Int) (event.Subscription, error) {

	var initiatorRule []interface{}
	for _, initiatorItem := range initiator {
		initiatorRule = append(initiatorRule, initiatorItem)
	}
	var einRule []interface{}
	for _, einItem := range ein {
		einRule = append(einRule, einItem)
	}

	logs, sub, err := _Identityregistry.contract.WatchLogs(opts, "ResolverAdded", initiatorRule, einRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(IdentityregistryResolverAdded)
				if err := _Identityregistry.contract.UnpackLog(event, "ResolverAdded", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// IdentityregistryResolverRemovedIterator is returned from FilterResolverRemoved and is used to iterate over the raw logs and unpacked data for ResolverRemoved events raised by the Identityregistry contract.
type IdentityregistryResolverRemovedIterator struct {
	Event *IdentityregistryResolverRemoved // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *IdentityregistryResolverRemovedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(IdentityregistryResolverRemoved)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(IdentityregistryResolverRemoved)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *IdentityregistryResolverRemovedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *IdentityregistryResolverRemovedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// IdentityregistryResolverRemoved represents a ResolverRemoved event raised by the Identityregistry contract.
type IdentityregistryResolverRemoved struct {
	Initiator common.Address
	Ein       *big.Int
	Resolvers common.Address
	Delegated bool
	Raw       types.Log // Blockchain specific contextual infos
}

// FilterResolverRemoved is a free log retrieval operation binding the contract event 0x35f17668a4aadc48b2952cd27f0c5017b357497a1f20cedf4713d91d019a63a8.
//
// Solidity: event ResolverRemoved(address indexed initiator, uint256 indexed ein, address resolvers, bool delegated)
func (_Identityregistry *IdentityregistryFilterer) FilterResolverRemoved(opts *bind.FilterOpts, initiator []common.Address, ein []*big.Int) (*IdentityregistryResolverRemovedIterator, error) {

	var initiatorRule []interface{}
	for _, initiatorItem := range initiator {
		initiatorRule = append(initiatorRule, initiatorItem)
	}
	var einRule []interface{}
	for _, einItem := range ein {
		einRule = append(einRule, einItem)
	}

	logs, sub, err := _Identityregistry.contract.FilterLogs(opts, "ResolverRemoved", initiatorRule, einRule)
	if err != nil {
		return nil, err
	}
	return &IdentityregistryResolverRemovedIterator{contract: _Identityregistry.contract, event: "ResolverRemoved", logs: logs, sub: sub}, nil
}

// WatchResolverRemoved is a free log subscription operation binding the contract event 0x35f17668a4aadc48b2952cd27f0c5017b357497a1f20cedf4713d91d019a63a8.
//
// Solidity: event ResolverRemoved(address indexed initiator, uint256 indexed ein, address resolvers, bool delegated)
func (_Identityregistry *IdentityregistryFilterer) WatchResolverRemoved(opts *bind.WatchOpts, sink chan<- *IdentityregistryResolverRemoved, initiator []common.Address, ein []*big.Int) (event.Subscription, error) {

	var initiatorRule []interface{}
	for _, initiatorItem := range initiator {
		initiatorRule = append(initiatorRule, initiatorItem)
	}
	var einRule []interface{}
	for _, einItem := range ein {
		einRule = append(einRule, einItem)
	}

	logs, sub, err := _Identityregistry.contract.WatchLogs(opts, "ResolverRemoved", initiatorRule, einRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(IdentityregistryResolverRemoved)
				if err := _Identityregistry.contract.UnpackLog(event, "ResolverRemoved", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}
